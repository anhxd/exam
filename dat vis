Data Visualisation using matplotlib
  
Line graph
Code
x = [0,1,2,3,4]
y = [0,1,8,27,64]
# Resize your Graph (dpi specifies pixels per inch. When saving probably should use 300 if possible)
plt.figure(figsize=(8,5), dpi=100)
# Line 1
# Keyword Argument Notation
#plt.plot(x,y, label='2x', color='red', linewidth=2, marker='.', linestyle='--', markersize=10, markeredgecolor='blue')
# Shorthand notation
# fmt = '[color][marker][line]'
plt.plot(x,y, 'b^--', label='x^3')
## Line 2
# select interval we want to plot points at
x2 = np.arange(0,4.5,0.5)
# Plot part of the graph as line
plt.plot(x2[:6], x2[:6]**2, 'r', label='X^2')
# Plot remainder of graph as a dot
plt.plot(x2[5:], x2[5:]**2, 'r--')
# Add a title (specify font parameters with fontdict)
plt.title('Graph for squares and cubes', fontdict={'fontname': 'Comic Sans MS', 'fontsize': 20})
# X and Y labels
plt.xlabel('X Axis')
plt.ylabel('Y Axis')
# X, Y axis Tickmarks (scale of your graph)
plt.xticks([0,1,2,3,4,])
#plt.yticks([0,2,4,6,8,10])
# Add a legend
plt.legend()
# Save figure (dpi 300 is good when saving so graph has high resolution)
plt.savefig('mygraph.png', dpi=300)
# Show plot
plt.show()
Output->
  
Bar Graph
labels = ['Aditti','Riya','Diya']
values = [78,90,87]
plt.figure(figsize=(5,3), dpi=100)
bars = plt.bar(labels, values)
patterns = ['/', 'O', '*']
for bar in bars:
bar.set_hatch(patterns.pop(0))
plt.savefig('barchart.png', dpi=300)
plt.show()
Output->
Line graph2
Code->
gas = pd.read_csv('C:/Users/HP/Downloads/paryiculate.csv')
plt.figure(figsize=(8,5))
plt.title('Particulate Matter', fontdict={'fontweight':'bold', 'fontsize': 18})
plt.plot(gas.Date, gas.PM, 'b.-', label='PM2.5')
plt.plot(gas.Date, gas.NO, 'r.-',label='NO')
plt.plot(gas.Date, gas.NO2, 'g.-',label='NO2')
plt.plot(gas.Date, gas.NOx, 'y.-',label='NOx')
# Another Way to plot many values!
# countries_to_look_at = ['Australia', 'USA', 'Canada', 'South Korea']
# for country in gas:
# if country in countries_to_look_at:
# plt.plot(gas.Year, gas[country], marker='.')
plt.xlabel('Year')
plt.ylabel('US Dollars')
plt.legend()
plt.savefig('Gas_price_figure.png', dpi=300)
plt.show()
Output->
  
Frequency Distribution graphs
Dataset->
WHO = pd.read_csv('C:/Users/HP/Downloads/heart.csv')
WHO.head(5)
Histogram
bins = [40,50,60,70,80]
plt.figure(figsize=(8,5))
plt.hist(WHO.age, bins=bins, color='#abcdef')
plt.xticks(bins)
plt.ylabel('Number of Patients having cholestrol')
plt.xlabel('Age gap')
plt.title('Distribution of Patients having cholestrol for different age groups')
plt.savefig('histogram.png', dpi=300)
plt.show()
Output->
  
Pie chart
Code
left = WHO.loc[WHO['fbs'] == 1].count()[0]
right = WHO.loc[WHO['fbs'] == 0].count()[0]
plt.figure(figsize=(8,5))
labels = ['fbs=1', 'fbs=0']
colors = ['#abcdef', '#aabbcc']
plt.pie([left, right], labels = labels, colors=colors, autopct='%.2f %%')
plt.title('Distribution of people having high and low Fasting Blood sugar')
plt.show()
Output->
  
Pie chart-2
Code->
plt.figure(figsize=(8,5), dpi=100)
plt.style.use('ggplot')
WHO.trtbps = [int(x.strip('lbs')) if type(x)==str else x for x in WHO.trtbps]
light = WHO.loc[WHO.trtbps < 125].count()[0]
light_medium = WHO[(WHO.trtbps >= 125) & (WHO.trtbps < 150)].count()[0]
medium = WHO[(WHO.trtbps >= 150) & (WHO.trtbps < 175)].count()[0]
medium_heavy = WHO[(WHO.trtbps >= 175) & (WHO.trtbps < 200)].count()[0]
heavy = WHO[WHO.trtbps >= 200].count()[0]
weights = [light,light_medium, medium, medium_heavy, heavy]
label = ['under 125', '125-150', '150-175', '175-200', 'over 200']
explode = (.4,.2,0,0,.4)
plt.title('Resting blood pressure of the patients of different age groups')
plt.pie(weights, labels=label, explode=explode, pctdistance=0.8,autopct='%.2f %%')
plt.show()
Output->
  
Box-plot->
Code->
plt.figure(figsize=(5,8), dpi=100)
plt.style.use('default')
Good = WHO.loc[WHO.restecg == 1]["age"]
Poor = WHO.loc[WHO.restecg == 1]["age"]
#bp = plt.boxplot([barcelona, madrid, revs], labels=['a','b','c'], boxprops=dict(facecolor='red'))
bp = plt.boxplot([Good, Poor], labels=['Good ECG','Poor ECG'], patch_artist=True, medianprops={'linewidth': 2})
plt.title('Overall ECG comparision')
plt.ylabel('ECG distribution among patientsof different ages')
for box in bp['boxes']:
# change outline color
box.set(color='#4286f4', linewidth=2)
# change fill color
box.set(facecolor = '#e0e0e0' )
# change hatch
#box.set(hatch = '/')
plt.show()
